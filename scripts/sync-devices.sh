#!/bin/bash
set -uo pipefail

# ÁºñÁ†ÅËÆæÁΩÆ
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
export LANGUAGE=en_US.UTF-8

# ==============================================
# Âü∫Á°ÄÈÖçÁΩÆ
# ==============================================
WORK_DIR=$(pwd)
LOG_DIR="$WORK_DIR/sync-logs"
OUTPUT_JSON="$WORK_DIR/device-drivers.json"
SYNC_LOG="$LOG_DIR/sync-detail.log"

# Êâ©Â±ïÈ©±Âä®Êù•Ê∫ê‰ªìÂ∫ì
PKG_REPOS=(
    "https://git.openwrt.org/feed/packages.git"
    "https://git.openwrt.org/project/luci.git"
    "https://git.openwrt.org/feed/routing.git"
    "https://git.openwrt.org/feed/telephony.git"
    "https://github.com/coolsnowwolf/lede-packages.git"
    "https://github.com/immortalwrt/packages.git"
    "https://github.com/openwrt/packages.git"
)

TMP_SRC=$(mktemp -d -t openwrt-src-XXXXXX)
TMP_PKGS_BASE=$(mktemp -d -t openwrt-pkgs-XXXXXX)
TMP_BATCH_DIR="$LOG_DIR/device_batches"

# Á°Æ‰øùÊó•ÂøóÂíå‰∏¥Êó∂ÁõÆÂΩïÂ≠òÂú®
mkdir -p "$LOG_DIR" "$TMP_BATCH_DIR" || { 
    echo "‚ùå Êó†Ê≥ïÂàõÂª∫Êó•ÂøóÁõÆÂΩï" >&2; 
    exit 1; 
}
> "$SYNC_LOG"  # Ê∏ÖÁ©∫Êó•ÂøóÊñá‰ª∂


# ==============================================
# Â∑•ÂÖ∑ÂáΩÊï∞
# ==============================================
log() {
    local timestamp=$(date +"%Y-%m-%d %H:%M:%S")
    printf "[%s] %s\n" "$timestamp" "$1" | tee -a "$SYNC_LOG"
}

# Ê∏ÖÁêÜ‰∏¥Êó∂ËµÑÊ∫ê
cleanup() {
    log "üîß Ê∏ÖÁêÜ‰∏¥Êó∂ËµÑÊ∫ê..."
    if [ -n "$TMP_SRC" ] && [ -d "$TMP_SRC" ]; then
        rm -rf "$TMP_SRC"
        log "‚úÖ ‰∏ªÊ∫êÁ†Å‰∏¥Êó∂ÁõÆÂΩïÊ∏ÖÁêÜÂÆåÊàê"
    fi
    if [ -n "$TMP_PKGS_BASE" ] && [ -d "$TMP_PKGS_BASE" ]; then
        rm -rf "$TMP_PKGS_BASE"
        log "‚úÖ È©±Âä®‰ªìÂ∫ì‰∏¥Êó∂ÁõÆÂΩïÊ∏ÖÁêÜÂÆåÊàê"
    fi
    [ -d "$TMP_BATCH_DIR" ] && rm -rf "$TMP_BATCH_DIR"
    # ‰øùÁïôsource_branches.tmpÂ§ñÁöÑ‰∏¥Êó∂Êñá‰ª∂
    find "$LOG_DIR" -name "*.tmp" -not -name "source_branches.tmp" -delete
    log "‚úÖ ‰∏¥Êó∂ËµÑÊ∫êÊ∏ÖÁêÜÂÆåÊàê"
}
trap cleanup EXIT  # ËÑöÊú¨ÈÄÄÂá∫Êó∂Ëá™Âä®Ê∏ÖÁêÜ


# ==============================================
# 1. ‰æùËµñÊ£ÄÊü•
# ==============================================
check_dependencies() {
    log "üîç Ê£ÄÊü•‰æùËµñÂ∑•ÂÖ∑..."
    REQUIRED_TOOLS=("git" "jq" "grep" "sed" "awk" "find" "wc" "tr" "sort" "uniq" "file" "gcc" "iconv")
    
    for tool in "${REQUIRED_TOOLS[@]}"; do
        if ! command -v "$tool" &> /dev/null; then
            log "‚ùå Áº∫Â§±ÂøÖË¶ÅÂ∑•ÂÖ∑Ôºö$toolÔºàËØ∑ÂÖàÂÆâË£ÖÔºâ"
            exit 1
        fi
    done

    # Ê£ÄÊü•jqÁâàÊú¨ÔºàËá≥Â∞ë1.6Ôºâ
    if ! jq_version_str=$(jq --version 2>/dev/null | grep -oE '[0-9]+\.[0-9]+(\.[0-9]+)?' | head -n1); then
        log "‚ùå Êó†Ê≥ïËß£ÊûêjqÁâàÊú¨ÔºåËØ∑ÂÆâË£Öjq 1.6+"
        exit 1
    fi
    jq_major=$(echo "$jq_version_str" | cut -d'.' -f1)
    jq_minor=$(echo "$jq_version_str" | cut -d'.' -f2)
    if [ "$jq_major" -lt 1 ] || [ "$jq_minor" -lt 6 ]; then
        log "‚ùå ËØ∑ÂÆâË£Öjq 1.6+ÔºàÂΩìÂâçÁâàÊú¨Ôºö$jq_version_strÔºâ"
        exit 1
    fi

    # Ê£ÄÊü•GNU grep
    if ! grep -E --help &> /dev/null; then
        log "‚ùå ËØ∑‰ΩøÁî®GNU grepÔºàÈùûBSDÁâàÊú¨Ôºâ"
        exit 1
    fi
    
    log "‚úÖ ‰æùËµñÂ∑•ÂÖ∑Ê£ÄÊü•ÈÄöËøá"
}


# ==============================================
# 2. ‰ªìÂ∫ìÂÖãÈöÜ
# ==============================================
clone_repositories() {
    log "üì• ÂÖãÈöÜOpenWrt‰∏ªÊ∫êÁ†Å..."
    local retries=3
    local timeout=600  # 10ÂàÜÈíüË∂ÖÊó∂
    local required_dirs=("target/linux" "package")  # Ê†∏ÂøÉÁõÆÂΩïÈ™åËØÅ

    while [ $retries -gt 0 ]; do
        rm -rf "$TMP_SRC"  # Ê∏ÖÁêÜ‰∏äÊ¨°ÊÆãÁïô
        if timeout $timeout git clone https://git.openwrt.org/openwrt/openwrt.git "$TMP_SRC" 2>> "$SYNC_LOG"; then
            # È™åËØÅÊ†∏ÂøÉÁõÆÂΩïÊòØÂê¶Â≠òÂú®
            local missing=0
            for dir in "${required_dirs[@]}"; do
                if [ ! -d "$TMP_SRC/$dir" ]; then
                    log "‚ö†Ô∏è ‰∏ªÊ∫êÁ†ÅÁº∫Â§±ÂÖ≥ÈîÆÁõÆÂΩïÔºö$dir"
                    missing=1
                fi
            done
            if [ $missing -eq 0 ]; then
                log "‚úÖ ‰∏ªÊ∫êÁ†ÅÂÖãÈöÜÊàêÂäüÔºàÊ†∏ÂøÉÁõÆÂΩïÂÆåÊï¥Ôºâ"
                break
            fi
        fi
        retries=$((retries - 1))
        log "‚ö†Ô∏è ‰∏ªÊ∫êÁ†ÅÂÖãÈöÜÂ§±Ë¥•ÔºåÂâ©‰ΩôÈáçËØïÔºö$retries"
        sleep 10
    done

    if [ $retries -eq 0 ]; then
        log "‚ùå ‰∏ªÊ∫êÁ†ÅÂÖãÈöÜÂ§±Ë¥•ÔºàÊ†∏ÂøÉÁõÆÂΩïÂßãÁªàÁº∫Â§±Ôºâ"
        exit 1
    fi

    # ÂÖãÈöÜÊâ©Â±ïÈ©±Âä®‰ªìÂ∫ì
    log "üì• ÂÖãÈöÜÊâ©Â±ïÈ©±Âä®‰ªìÂ∫ìÔºàÂÖ± ${#PKG_REPOS[@]} ‰∏™Ôºâ..."
    local repo_idx=1
    for repo in "${PKG_REPOS[@]}"; do
        local repo_name=$(basename "$repo" .git)
        local repo_dir="$TMP_PKGS_BASE/$repo_name"
        
        retries=3
        while [ $retries -gt 0 ]; do
            rm -rf "$repo_dir"
            if timeout $timeout git clone --depth 10 "$repo" "$repo_dir" 2>> "$SYNC_LOG"; then
                log "‚úÖ È©±Âä®‰ªìÂ∫ì $repo_idx/${#PKG_REPOS[@]} ÂÖãÈöÜÊàêÂäüÔºö$repo_name"
                break
            fi
            retries=$((retries - 1))
            log "‚ö†Ô∏è È©±Âä®‰ªìÂ∫ì $repo_idx/${#PKG_REPOS[@]} ÂÖãÈöÜÂ§±Ë¥•ÔºàÂâ©‰ΩôÈáçËØïÔºö$retriesÔºâÔºö$repo_name"
            sleep 5
        done
        if [ $retries -eq 0 ]; then
            log "‚ö†Ô∏è È©±Âä®‰ªìÂ∫ì $repo_name ÂÖãÈöÜÂ§±Ë¥•ÔºåË∑≥Ëøá"
        fi
        repo_idx=$((repo_idx + 1))
    done
}


# ==============================================
# 3. ËÆæÂ§á‰ø°ÊÅØÊèêÂèñÔºàÊ†∏ÂøÉÔºöÊèêÂèñËÆæÂ§áÂêçÁß∞„ÄÅÂéÇÂïÜ„ÄÅÂπ≥Âè∞Ôºâ
# ==============================================
extract_devices() {
    log "üîç ÊèêÂèñËÆæÂ§á‰ø°ÊÅØÔºàÂê´ÂéÇÂïÜÂíåÂπ≥Âè∞ÁâπÂæÅÔºâ..."
    declare -A PROCESSED_DEVICES  # ÂéªÈáçËÆæÂ§áÂêçÁß∞
    local BATCH_SIZE=1000
    local device_data_tmp="$LOG_DIR/device_data.tmp"
    > "$device_data_tmp"  # Ê∏ÖÁ©∫‰∏¥Êó∂ËÆæÂ§áÊï∞ÊçÆ

    local target_dir="$TMP_SRC/target/linux"
    if [ ! -d "$target_dir" ]; then
        log "‚ùå ËÆæÂ§áÈÖçÁΩÆÁõÆÂΩï‰∏çÂ≠òÂú®Ôºö$target_dir"
        exit 1
    fi

    # Êü•ÊâæÊâÄÊúâËÆæÂ§áÁõ∏ÂÖ≥Êñá‰ª∂ÔºàDTS„ÄÅMakefileÁ≠âÔºâ
    find "$target_dir" \( -name "*.dts" -o -name "*.dtsi" -o -name "*.dtso" \
        -o -name "*.mk" -o -name "Makefile" -o -name "*.conf" \
        -o -name "*.board" -o -name "*.profile" \) > "$LOG_DIR/device_files.tmp"
    
    local total_files=$(wc -l < "$LOG_DIR/device_files.tmp")
    log "‚ÑπÔ∏è ÂèëÁé∞ $total_files ‰∏™ËÆæÂ§áÁõ∏ÂÖ≥Êñá‰ª∂"
    if [ "$total_files" -eq 0 ]; then
        log "‚ùå Êú™ÊâæÂà∞‰ªª‰ΩïËÆæÂ§áÊñá‰ª∂"
        exit 1
    fi

    # ÂàÜÊâπÂ§ÑÁêÜÊñá‰ª∂ÔºàÈÅøÂÖçÂÜÖÂ≠òÊ∫¢Âá∫Ôºâ
    split -l $BATCH_SIZE "$LOG_DIR/device_files.tmp" "$TMP_BATCH_DIR/batch_"
    local processed=0
    
    for batch_file in "$TMP_BATCH_DIR"/batch_*; do
        [ -f "$batch_file" ] || continue
        local batch_name=$(basename "$batch_file")
        log "‚ÑπÔ∏è Â§ÑÁêÜÊâπÊ¨°Ôºö$batch_name"

        while IFS= read -r file; do
            [ -f "$file" ] || { log "‚ö†Ô∏è Ë∑≥Ëøá‰∏çÂ≠òÂú®Êñá‰ª∂Ôºö$file"; continue; }

            local file_ext=$(echo "$file" | awk -F '.' '{if (NF>1) print $NF; else print "none"}')
            local device_names=""
            local chip=""
            local vendor=""
            local platform=""  # ËÆæÂ§áÊâÄÂ±ûÂπ≥Âè∞ÔºàÂ¶Çmt7621„ÄÅipq806xÔºâ

            # Ê†πÊçÆÊñá‰ª∂Á±ªÂûãÊèêÂèñ‰ø°ÊÅØ
            case "$file_ext" in
                dts|dtsi|dtso)
                    # ‰ªéËÆæÂ§áÊ†ëÊñá‰ª∂ÊèêÂèñÂûãÂè∑ÂíåÂÖºÂÆπÊÄß
                    local model=$(grep -E 'model[[:space:]]*=' "$file" 2>> "$SYNC_LOG" | 
                                  sed -E 's/model[[:space:]]*=[[:space:]]*["'\'']//; s/["'\''];//; s/^[[:space:]]*//' |
                                  iconv -f UTF-8 -t UTF-8//IGNORE)
                    local compatible=$(grep -E 'compatible[[:space:]]*=' "$file" 2>> "$SYNC_LOG" | 
                                      sed -E 's/compatible[[:space:]]*=[[:space:]]*["'\'']//; s/["'\''],?[[:space:]]*/ /g' |
                                      iconv -f UTF-8 -t UTF-8//IGNORE)
                    device_names="$model $compatible"
                    vendor=$(echo "$compatible" | awk -F ',' '{print $1}' | head -n1 | tr '[:upper:]' '[:lower:]')
                    chip=$(echo "$compatible" | grep -oE '[a-z0-9]+,[a-z0-9-]+' | awk -F ',' '{print $2}' | head -n1 | tr '[:upper:]' '[:lower:]')
                    # ‰ªéË∑ØÂæÑÊèêÂèñÂπ≥Âè∞ÔºàÂ¶Çtarget/linux/mt7621 -> mt7621Ôºâ
                    platform=$(echo "$file" | sed -E 's|.*/target/linux/([^/]+)/.*|\1|; t; d' | tr '[:upper:]' '[:lower:]')
                    ;;

                mk|Makefile)
                    # ‰ªéMakefileÊèêÂèñËÆæÂ§áÂêçÁß∞
                    device_names=$(grep -E 'DEVICE_NAME|SUPPORTED_DEVICES' "$file" 2>> "$SYNC_LOG" | 
                                  sed -E 's/(DEVICE_NAME|SUPPORTED_DEVICES)[[:space:]]*[:=][[:space:]]*//; s/["'\'']//g' |
                                  iconv -f UTF-8 -t UTF-8//IGNORE | tr '[:upper:]' '[:lower:]')
                    vendor=$(echo "$file" | sed -E 's|.*/target/linux/([^/]+)/.*|\1|; t; d' | tr '[:upper:]' '[:lower:]')
                    platform=$(echo "$file" | sed -E 's|.*/target/linux/([^/]+)/.*|\1|; t; d' | tr '[:upper:]' '[:lower:]')
                    chip=$(grep -E '^SOC[[:space:]]*:=' "$file" 2>> "$SYNC_LOG" | 
                          sed -E 's/SOC[[:space:]]*:=[[:space:]]*//; s/["'\'']//g' | head -n1 | tr '[:upper:]' '[:lower:]')
                    ;;

                conf|config)
                    # ‰ªéÈÖçÁΩÆÊñá‰ª∂ÊèêÂèñËÆæÂ§á
                    device_names=$(grep -E '^CONFIG_TARGET_DEVICE' "$file" 2>> "$SYNC_LOG" | 
                                  sed -E 's/CONFIG_TARGET_DEVICE_//; s/=y//; s/_/-/g' |
                                  iconv -f UTF-8 -t UTF-8//IGNORE | tr '[:upper:]' '[:lower:]')
                    platform=$(echo "$file" | sed -E 's|.*/target/linux/([^/]+)/.*|\1|; t; d' | tr '[:upper:]' '[:lower:]')
                    ;;

                *)
                    log "‚ö†Ô∏è Ë∑≥Ëøá‰∏çÊîØÊåÅÁöÑÊñá‰ª∂Á±ªÂûãÔºö$file_extÔºàÊñá‰ª∂Ôºö$fileÔºâ"
                    continue
                    ;;
            esac

            # Â§ÑÁêÜËÆæÂ§áÂêçÁß∞ÔºàÂéªÈáç„ÄÅÊ∏ÖÁêÜÁâπÊÆäÂ≠óÁ¨¶Ôºâ
            for name in $device_names; do
                [ -z "$name" ] && continue
                # Ê∏ÖÁêÜËÆæÂ§áÂêçÁß∞ÔºàÊõøÊç¢ÁâπÊÆäÂ≠óÁ¨¶‰∏∫Áü≠Ê®™Á∫øÔºâ
                local clean_name=$(echo "$name" | sed -E 's/[_,:;\/]+/-/g; s/[^a-zA-Z0-9-]//g; s/--+/-/g; s/^-|-$//')
                [ -z "$clean_name" ] && continue

                # ÂéªÈáçÔºöÂêå‰∏ÄËÆæÂ§áÂè™ËÆ∞ÂΩï‰∏ÄÊ¨°
                if ! [[ -v PROCESSED_DEVICES["$clean_name"] ]]; then
                    PROCESSED_DEVICES["$clean_name"]=1
                    # ÂÜôÂÖ•‰∏¥Êó∂ËÆæÂ§áÊï∞ÊçÆÔºàJSONÊ†ºÂºèÔºâ
                    jq -n \
                       --arg name "$clean_name" \
                       --arg chip "$chip" \
                       --arg vendor "$vendor" \
                       --arg platform "$platform" \
                       '{"name": $name, "chip": $chip, "vendor": $vendor, "platform": $platform, "drivers": []}' \
                       >> "$device_data_tmp"
                    log "‚ÑπÔ∏è ÊèêÂèñËÆæÂ§áÔºö$clean_nameÔºàÂéÇÂïÜÔºö$vendorÔºåÂπ≥Âè∞Ôºö$platformÔºâ"
                fi
            done

            processed=$((processed + 1))
            [ $((processed % 100)) -eq 0 ] && log "‚ÑπÔ∏è Â∑≤Â§ÑÁêÜ $processed/$total_files ‰∏™Êñá‰ª∂"
        done < "$batch_file"
    done

    # ÂêàÂπ∂ËÆæÂ§áÊï∞ÊçÆ‰∏∫ÊúÄÁªàÊ†ºÂºè
    jq -s '{"devices": .}' "$device_data_tmp" > "$LOG_DIR/device_list.json"
    local device_count=$(jq '.devices | length' "$LOG_DIR/device_list.json" 2>/dev/null || echo 0)
    log "‚úÖ ËÆæÂ§áÊèêÂèñÂÆåÊàêÔºåÂÖ± $device_count ‰∏™ËÆæÂ§á"
    rm -f "$LOG_DIR/device_files.tmp"  # Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂
}


# ==============================================
# 4. ËäØÁâá‰ø°ÊÅØÊèêÂèñÔºà‰Ωú‰∏∫ÂÖúÂ∫ïÔºåÈùûÂøÖÈ°ªÔºâ
# ==============================================
extract_chips() {
    log "üîç ÊèêÂèñËäØÁâá‰ø°ÊÅØÔºà‰Ωú‰∏∫È©±Âä®ÂåπÈÖçÂÖúÂ∫ïÔºâ..."
    local chip_data_tmp="$LOG_DIR/chip_data.tmp"
    > "$chip_data_tmp"

    # ‰ªéËÆæÂ§áÂàóË°®ÊèêÂèñÂîØ‰∏ÄËäØÁâá
    jq -r '.devices[].chip | select(. != "")' "$LOG_DIR/device_list.json" | sort | uniq | while read -r chip; do
        # ‰ªéËÆæÂ§á‰∏≠ÂÖ≥ËÅîËäØÁâáÁöÑÂéÇÂïÜÂíåÂπ≥Âè∞
        local vendor=$(jq -r --arg c "$chip" '.devices[] | select(.chip == $c) | .vendor' "$LOG_DIR/device_list.json" | head -n1)
        local platform=$(jq -r --arg c "$chip" '.devices[] | select(.chip == $c) | .platform' "$LOG_DIR/device_list.json" | head -n1)
        
        # Êé®Êñ≠Êû∂ÊûÑÔºàÂπ≥Âè∞‚ÜíÊû∂ÊûÑÊò†Â∞ÑË°®Ôºâ
        declare -A PLATFORM_ARCH=(
            ["mt7621"]="mips" ["mt7620"]="mips" ["rt305x"]="mips"
            ["ipq4019"]="armv7" ["ipq806x"]="armv7" ["qca9531"]="armv7"
            ["rk3399"]="aarch64" ["mt7981"]="aarch64" ["sunxi"]="aarch64"
            ["x86"]="x86_64" ["x86_64"]="x86_64"
        )
        local arch=${PLATFORM_ARCH[$platform]:-"unknown-arch"}

        # ÊèêÂèñËäØÁâáÁ≥ªÂàóÔºàÂèñÂâçÁºÄÔºâ
        local series=$(echo "$chip" | awk -F '-' '{print $1}')

        # ÂÜôÂÖ•ËäØÁâáÊï∞ÊçÆ
        jq -n \
           --arg name "$chip" \
           --arg arch "$arch" \
           --arg vendor "$vendor" \
           --arg series "$series" \
           --arg platform "$platform" \
           '{"name": $name, "architecture": $arch, "vendor": $vendor, "series": $series, "platform": $platform, "default_drivers": []}' \
           >> "$chip_data_tmp"
    done

    # ÂêàÂπ∂ËäØÁâáÊï∞ÊçÆ
    jq -s '{"chips": .}' "$chip_data_tmp" > "$LOG_DIR/chip_list.json"
    local chip_count=$(jq '.chips | length' "$LOG_DIR/chip_list.json" 2>/dev/null || echo 0)
    log "‚úÖ ËäØÁâáÊèêÂèñÂÆåÊàêÔºåÂÖ± $chip_count ‰∏™ËäØÁâá"
}


# ==============================================
# 5. È©±Âä®ÂÖÉÊï∞ÊçÆËß£ÊûêÔºàÊ†∏ÂøÉÔºöÊèêÂèñËÆæÂ§áÊîØÊåÅ‰ø°ÊÅØÔºâ
# ==============================================
parse_driver_metadata() {
    log "üîç Ëß£ÊûêÈ©±Âä®ÂÖÉÊï∞ÊçÆÔºàÂê´ËÆæÂ§á/ÂéÇÂïÜ/Âπ≥Âè∞ÊîØÊåÅÔºâ..."
    local driver_meta_dir="$LOG_DIR/driver_metadata"
    mkdir -p "$driver_meta_dir"
    > "$LOG_DIR/driver_files.tmp"  # ËÆ∞ÂΩïÊâÄÊúâÈ©±Âä®Êñá‰ª∂

    # 1. Êî∂ÈõÜÊâÄÊúâÈ©±Âä®Áõ∏ÂÖ≥Êñá‰ª∂ÔºàMakefile/KconfigÔºâ
    log "‚ÑπÔ∏è Êî∂ÈõÜÈ©±Âä®Êñá‰ª∂..."
    # ‰∏ªÊ∫êÁ†ÅÈ©±Âä®
    find "$TMP_SRC/package" -name "Makefile" -o -name "Kconfig" >> "$LOG_DIR/driver_files.tmp"
    find "$TMP_SRC/target/linux" -name "Makefile" -o -name "Kconfig" >> "$LOG_DIR/driver_files.tmp"
    # Êâ©Â±ï‰ªìÂ∫ìÈ©±Âä®
    for repo_dir in "$TMP_PKGS_BASE"/*; do
        [ -d "$repo_dir" ] || continue
        find "$repo_dir" -name "Makefile" -o -name "Kconfig" >> "$LOG_DIR/driver_files.tmp"
    done

    local total_drv_files=$(wc -l < "$LOG_DIR/driver_files.tmp")
    log "‚ÑπÔ∏è ÂÖ±ÂèëÁé∞ $total_drv_files ‰∏™È©±Âä®Êñá‰ª∂ÔºåÂºÄÂßãËß£Êûê..."
    if [ "$total_drv_files" -eq 0 ]; then
        log "‚ùå Êú™ÊâæÂà∞‰ªª‰ΩïÈ©±Âä®Êñá‰ª∂"
        exit 1
    fi

    # 2. Ëß£ÊûêÊØè‰∏™È©±Âä®Êñá‰ª∂ÔºåÊèêÂèñÊîØÊåÅ‰ø°ÊÅØ
    local processed_drv=0
    while IFS= read -r file; do
        [ -f "$file" ] || { log "‚ö†Ô∏è Ë∑≥Ëøá‰∏çÂ≠òÂú®ÁöÑÈ©±Âä®Êñá‰ª∂Ôºö$file"; continue; }

        # È©±Âä®ÂêçÁß∞ÔºàÂèñÁà∂ÁõÆÂΩïÂêçÔºâ
        local driver_name=$(basename "$(dirname "$file")" | tr '[:upper:]' '[:lower:]')
        [ -z "$driver_name" ] && driver_name=$(basename "$file" | sed 's/\.(Makefile|Kconfig)//')

        # ÊèêÂèñÊîØÊåÅÁöÑËÆæÂ§á/ÂéÇÂïÜ/Âπ≥Âè∞/ËäØÁâá
        local supported_devices=""
        local supported_vendors=""
        local supported_platforms=""
        local supported_chips=""

        if [[ "$file" == *"Makefile"* ]]; then
            # ‰ªéMakefileÊèêÂèñËÆæÂ§á/ÂéÇÂïÜ/Âπ≥Âè∞ÊîØÊåÅ
            supported_devices=$(grep -E 'SUPPORTED_DEVICES|DEVICE_LIST' "$file" 2>> "$SYNC_LOG" | 
                               sed -E 's/.*=[[:space:]]*//; s/["'\'']//g; s/ /,/g' | tr '[:upper:]' '[:lower:]')
            supported_vendors=$(grep -E 'VENDOR:=|VENDOR_NAME=' "$file" 2>> "$SYNC_LOG" | 
                               sed -E 's/.*=//; s/["'\'']//g' | tr '[:upper:]' '[:lower:]')
            supported_platforms=$(grep -E 'PLATFORM:=|TARGET_PLATFORM=' "$file" 2>> "$SYNC_LOG" | 
                                 sed -E 's/.*=//; s/["'\'']//g' | tr '[:upper:]' '[:lower:]')
        elif [[ "$file" == *"Kconfig"* ]]; then
            # ‰ªéKconfigÊèêÂèñËäØÁâáÊîØÊåÅ
            supported_chips=$(grep -E 'DEPENDS|COMPATIBLE' "$file" 2>> "$SYNC_LOG" | 
                             sed -E 's/.*=[[:space:]]*//; s/["'\'']//g; s/ /,/g' | tr '[:upper:]' '[:lower:]')
        fi

        # ÂéªÈáçÂπ∂Ê∏ÖÁêÜÁ©∫ÂÄº
        supported_devices=$(echo "$supported_devices" | tr ',' '\n' | sort | uniq | tr '\n' ',' | sed 's/,$//')
        supported_vendors=$(echo "$supported_vendors" | tr ',' '\n' | sort | uniq | tr '\n' ',' | sed 's/,$//')
        supported_platforms=$(echo "$supported_platforms" | tr ',' '\n' | sort | uniq | tr '\n' ',' | sed 's/,$//')
        supported_chips=$(echo "$supported_chips" | tr ',' '\n' | sort | uniq | tr '\n' ',' | sed 's/,$//')

        # ÂÜôÂÖ•È©±Âä®ÂÖÉÊï∞ÊçÆÔºàÂéªÈáçÔºâ
        if [ ! -f "$driver_meta_dir/$driver_name.json" ]; then
            jq -n \
               --arg name "$driver_name" \
               --arg devs "$supported_devices" \
               --arg vendors "$supported_vendors" \
               --arg plats "$supported_platforms" \
               --arg chips "$supported_chips" \
               '{"name": $name, "supported_devices": $devs, "supported_vendors": $vendors, "supported_platforms": $plats, "supported_chips": $chips}' \
               > "$driver_meta_dir/$driver_name.json"
        fi

        processed_drv=$((processed_drv + 1))
        [ $((processed_drv % 200)) -eq 0 ] && log "‚ÑπÔ∏è Â∑≤Ëß£Êûê $processed_drv/$total_drv_files ‰∏™È©±Âä®Êñá‰ª∂"
    done < "$LOG_DIR/driver_files.tmp"

    # 3. ÂêàÂπ∂ÊâÄÊúâÈ©±Âä®ÂÖÉÊï∞ÊçÆ
    jq -s '{"drivers": .}' "$driver_meta_dir"/*.json > "$LOG_DIR/driver_list.json"
    local driver_count=$(jq '.drivers | length' "$LOG_DIR/driver_list.json" 2>/dev/null || echo 0)
    log "‚úÖ È©±Âä®ÂÖÉÊï∞ÊçÆËß£ÊûêÂÆåÊàêÔºåÂÖ± $driver_count ‰∏™È©±Âä®"
}


# ==============================================
# 6. ËÆæÂ§áÈ©±Âä®ÂåπÈÖçÔºàÊ†∏ÂøÉÔºö‰ºòÂÖàËÆæÂ§áÁõ¥Êé•ÂåπÈÖçÔºâ
# ==============================================
match_drivers() {
    log "üîç ÂåπÈÖçËÆæÂ§áÈ©±Âä®Ôºà‰ºòÂÖàËÆæÂ§áÂêçÁß∞/ÂéÇÂïÜ/Âπ≥Âè∞Ôºâ..."
    local device_list="$LOG_DIR/device_list.json"
    local driver_list="$LOG_DIR/driver_list.json"
    local chip_list="$LOG_DIR/chip_list.json"

    # ÂàùÂßãÂåñËæìÂá∫JSON
    jq -n '{
        "devices": [],
        "chips": [],
        "drivers": [],
        "metadata": {"last_sync": "'"$(date +%Y-%m-%dT%H:%M:%S)"'"}
    }' > "$OUTPUT_JSON"

    # 1. ÂØºÂÖ•È©±Âä®ÂàóË°®
    jq --argfile drvs "$driver_list" '.drivers = $drvs.drivers' "$OUTPUT_JSON" > "$OUTPUT_JSON.tmp" && mv "$OUTPUT_JSON.tmp" "$OUTPUT_JSON"

    # 2. ÂØºÂÖ•ËäØÁâáÂàóË°®
    jq --argfile chips "$chip_list" '.chips = $chips.chips' "$OUTPUT_JSON" > "$OUTPUT_JSON.tmp" && mv "$OUTPUT_JSON.tmp" "$OUTPUT_JSON"

    # 3. ‰∏∫ÊØè‰∏™ËÆæÂ§áÂåπÈÖçÈ©±Âä®Ôºà‰ºòÂÖàÁ∫ßÔºöËÆæÂ§áÂêç > ÂéÇÂïÜ > Âπ≥Âè∞ > ËäØÁâáÔºâ
    log "‚ÑπÔ∏è ÂºÄÂßã‰∏∫ËÆæÂ§áÂåπÈÖçÈ©±Âä®..."
    jq -c '.devices[]' "$device_list" | while read -r device; do
        local dev_name=$(echo "$device" | jq -r '.name')
        local dev_vendor=$(echo "$device" | jq -r '.vendor')
        local dev_platform=$(echo "$device" | jq -r '.platform')
        local dev_chip=$(echo "$device" | jq -r '.chip')

        log "‚ÑπÔ∏è ÂåπÈÖçËÆæÂ§áÔºö$dev_nameÔºàÂéÇÂïÜÔºö$dev_vendorÔºåÂπ≥Âè∞Ôºö$dev_platformÔºâ"

        # Ê†∏ÂøÉÂåπÈÖçÈÄªËæëÔºöËÆ°ÁÆóÈ©±Âä®‰ºòÂÖàÁ∫ßÂπ∂Á≠õÈÄâ
        local matched_drivers=$(jq --arg name "$dev_name" \
                                   --arg vendor "$dev_vendor" \
                                   --arg platform "$dev_platform" \
                                   --arg chip "$dev_chip" \
                                   '.drivers | map(
                                       . + {
                                           "priority": (
                                               (if (.supported_devices | split(",") | index($name)) then 4 else 0 end) +
                                               (if (.supported_vendors | split(",") | index($vendor)) then 3 else 0 end) +
                                               (if (.supported_platforms | split(",") | index($platform)) then 2 else 0 end) +
                                               (if (.supported_chips | split(",") | index($chip)) then 1 else 0 end)
                                           )
                                       } |
                                       select(.priority > 0) |
                                       sort_by(-.priority) |
                                       map(.name) |
                                       unique' \
                                   "$OUTPUT_JSON")

        # Â¶ÇÊûúÊó†ÂåπÈÖçÔºåÊ∑ªÂä†ÈÄöÁî®È©±Âä®ÂÖúÂ∫ï
        if [ "$(echo "$matched_drivers" | jq length)" -eq 0 ]; then
            log "‚ö†Ô∏è ËÆæÂ§á $dev_name Êó†ÂåπÈÖçÈ©±Âä®ÔºåÊ∑ªÂä†ÈÄöÁî®È©±Âä®"
            matched_drivers='["kmod-core", "kmod-net-core", "kmod-usb-core"]'
        fi

        # Êõ¥Êñ∞ËÆæÂ§áÁöÑÈ©±Âä®ÂàóË°®
        jq --arg name "$dev_name" \
           --argjson drvs "$matched_drivers" \
           '.devices[] |= (if .name == $name then .drivers = $drvs else . end)' \
           "$OUTPUT_JSON" > "$OUTPUT_JSON.tmp" && mv "$OUTPUT_JSON.tmp" "$OUTPUT_JSON"
    done

    # 4. Ë°•ÂÖÖËÆæÂ§áÂàóË°®Âà∞ËæìÂá∫
    jq --argfile devs "$device_list" '.devices = $devs.devices' "$OUTPUT_JSON" > "$OUTPUT_JSON.tmp" && mv "$OUTPUT_JSON.tmp" "$OUTPUT_JSON"

    # 5. ÊúÄÁªàÁªüËÆ°
    local final_dev_count=$(jq '.devices | length' "$OUTPUT_JSON" 2>/dev/null || echo 0)
    local final_drv_count=$(jq '.drivers | length' "$OUTPUT_JSON" 2>/dev/null || echo 0)
    log "‚úÖ ËÆæÂ§áÈ©±Âä®ÂåπÈÖçÂÆåÊàêÔºàËÆæÂ§áÔºö$final_dev_count ‰∏™ÔºåÈ©±Âä®Ôºö$final_drv_count ‰∏™Ôºâ"
}


# ==============================================
# 7. ÁîüÊàêËæÖÂä©ÈÖçÁΩÆÔºàÂèØÈÄâÔºå‰øùÊåÅÂÆåÊï¥ÊÄßÔºâ
# ==============================================
generate_aux_configs() {
    log "üîç ÁîüÊàêÊ†∏ÂøÉÂäüËÉΩÂíå‰∏ªÈ¢òÈÖçÁΩÆ..."
    local config_dir="configs"
    mkdir -p "$config_dir"

    # ÁîüÊàêÊ†∏ÂøÉÂäüËÉΩÈÖçÁΩÆ
    jq -n '{"features": ["ipv6", "vpn", "qos", "nat", "wifi", "none"]}' > "$config_dir/core-features.json"

    # ÁîüÊàê‰∏ªÈ¢òÈÖçÁΩÆ
    jq -n '{"themes": [{"name": "argon"}, {"name": "material"}, {"name": "bootstrap"}]}' > "$config_dir/theme-optimizations.json"

    log "‚úÖ ËæÖÂä©ÈÖçÁΩÆÁîüÊàêÂÆåÊàê"
}


# ==============================================
# ‰∏ªÊµÅÁ®ã
# ==============================================
log "========================================="
log "üìå OpenWrtËÆæÂ§áÂêåÊ≠•Á≥ªÁªüÂêØÂä®ÔºàËÆæÂ§áÁõ¥Êé•ÂåπÈÖçÊ®°ÂºèÔºâ"
log "üìÖ ÂêåÊ≠•Êó∂Èó¥Ôºö$(date +"%Y-%m-%d %H:%M:%S")"
log "========================================="

# ‰æùÊ¨°ÊâßË°åÊâÄÊúâÊ≠•È™§
check_dependencies
clone_repositories
extract_devices
extract_chips  # ÂèØÈÄâÊ≠•È™§Ôºå‰Ωú‰∏∫ÂÖúÂ∫ï
parse_driver_metadata
match_drivers
generate_aux_configs  # ÂèØÈÄâÊ≠•È™§

# ËæìÂá∫ÊúÄÁªàÁªüËÆ°
log "========================================="
log "‚úÖ ÊâÄÊúâÂêåÊ≠•‰ªªÂä°ÂÆåÊàê"
log "üìä ËÆæÂ§áÊÄªÊï∞Ôºö$(jq '.devices | length' "$OUTPUT_JSON" 2>/dev/null || echo 0)"
log "üìä È©±Âä®ÊÄªÊï∞Ôºö$(jq '.drivers | length' "$OUTPUT_JSON" 2>/dev/null || echo 0)"
log "üìä ËæìÂá∫Êñá‰ª∂Ôºö$OUTPUT_JSON"
log "========================================="
