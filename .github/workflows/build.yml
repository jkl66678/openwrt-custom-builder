name: OpenWrt编译系统（设备自动同步+定时更新）

on:
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * 0"  # 每周日0点（UTC）同步设备库

jobs:
  sync-devices:
    name: 自动同步设备与驱动信息
    runs-on: ubuntu-latest
    steps:
      - name: 拉取仓库代码
        uses: actions/checkout@v4

      - name: 安装依赖工具
        run: |
          sudo apt update
          sudo apt install -y git jq

      - name: 运行设备同步脚本
        run: |
          # 创建同步脚本（若不存在）
          if [ ! -f "scripts/sync-devices.sh" ]; then
            mkdir -p scripts
            # 关键修复：确保heredoc内容缩进一致，EOF单独成行且无前置空格
            cat > scripts/sync-devices.sh << 'EOF'
#!/bin/bash
OPENWRT_REPO="https://git.openwrt.org/openwrt/openwrt.git"
BRANCH="openwrt-23.05"
TMP_DIR="./tmp-openwrt"
OUTPUT_FILE="device-drivers.json"

rm -rf $TMP_DIR $OUTPUT_FILE

echo "🔍 从 $OPENWRT_REPO 同步设备信息..."
if ! git clone --depth 1 --branch $BRANCH --single-branch $OPENWRT_REPO $TMP_DIR &> /dev/null; then
  echo "❌ 拉取源码失败，使用本地缓存（若有）"
  [ -f "$OUTPUT_FILE" ] || { echo "❌ 无本地缓存，同步失败"; exit 1; }
  exit 0
fi

cd $TMP_DIR/target/linux || exit 1

echo '{"devices": [], "chips": []}' > ../../$OUTPUT_FILE

declare -A platform_chip_map=(
  ["mediatek"]="mt7981 mt7621 mt7620"
  ["ramips"]="mt7621 mt7620"
  ["ipq806x"]="ipq8065 ipq8064"
  ["x86"]="x86_64"
)

for platform in $(ls -d */ | cut -d'/' -f1); do
  echo "📦 处理平台：$platform"
  chips=${platform_chip_map[$platform]:-""}

  for device_file in $(find $platform -name "*.mk" -o -name "*.dts"); do
    if [[ $device_file == *.mk ]]; then
      device_name=$(grep "DEVICE_NAME" "$device_file" | cut -d'=' -f2 | tr -d '"' | sed 's/ //g')
      default_pkgs=$(grep "DEFAULT_PACKAGES" "$device_file" | cut -d'=' -f2)
      drivers=$(echo "$default_pkgs" | grep -oE "kmod-[a-z0-9-]+" | tr '\n' ' ')
      chip=$(echo "$device_file $chips" | grep -oE "mt7981|mt7621|ipq8065|x86_64" | head -n1)
      kernel_target="$platform/generic"

      if [[ -n "$device_name" && -n "$chip" && -n "$drivers" ]]; then
        echo "  - 新增设备：$device_name（芯片：$chip）"
        jq --arg name "$device_name" \
           --arg chip "$chip" \
           --arg target "$kernel_target" \
           --arg drivers "$drivers" \
           '.devices += [{"name": $name, "chip": $chip, "kernel_target": $target, "drivers": ($drivers | split(" ") | map(select(length > 0)))}]' \
           ../../$OUTPUT_FILE > ../../$OUTPUT_FILE.tmp && mv ../../$OUTPUT_FILE.tmp ../../$OUTPUT_FILE
      fi
    fi
  done

  if [[ -n "$chips" ]]; then
    for chip in $chips; do
      chip_drivers=$(grep "DEFAULT_PACKAGES" "$platform/Makefile" 2>/dev/null | grep -oE "kmod-[a-z0-9-]+" | tr '\n' ' ')
      if [[ -n "$chip_drivers" ]]; then
        echo "  - 新增芯片：$chip（通用驱动）"
        jq --arg name "$chip" \
           --arg target "$kernel_target" \
           --arg drivers "$chip_drivers" \
           '.chips += [{"name": $name, "kernel_target": $target, "drivers": ($drivers | split(" ") | map(select(length > 0)))}]' \
           ../../$OUTPUT_FILE > ../../$OUTPUT_FILE.tmp && mv ../../$OUTPUT_FILE.tmp ../../$OUTPUT_FILE
      fi
    done
  fi
done

cd ../../ && rm -rf $TMP_DIR
echo "✅ 设备同步完成，生成device-drivers.json"
EOF
          fi
          chmod +x scripts/sync-devices.sh
          ./scripts/sync-devices.sh

      - name: 自动提交设备更新
        run: |
          git config --global user.name "Auto-Sync Bot"
          git config --global user.email "bot@github.com"
          if git diff --quiet device-drivers.json; then
            echo "⚠️ 设备信息无更新，无需提交"
          else
            git add device-drivers.json
            git commit -m "自动同步设备信息（$(date +%Y%m%d)）"
            git push
            echo "✅ 设备信息已更新并提交"
          fi


  build-firmware:
    name: 编译固件（基于最新设备信息）
    needs: sync-devices
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: write
      packages: write

    steps:
      - name: 拉取仓库代码
        uses: actions/checkout@v4

      - name: 环境准备与依赖安装
        run: |
          sudo apt update
          sudo apt install -y build-essential libncurses5-dev libncursesw5-dev \
            zlib1g-dev gawk git gettext libssl-dev xsltproc wget unzip python3 jq

      - name: 编译前关键自检
        run: |
          if [ "${{ github.event.inputs.select_mode }}" = "device" ] && [ -z "${{ github.event.inputs.device }}" ]; then
            echo "❌ 错误：设备模式下必须选择设备型号"
            exit 1
          fi
          if [ "${{ github.event.inputs.select_mode }}" = "chip" ] && [ -z "${{ github.event.inputs.chip }}" ]; then
            echo "❌ 错误：芯片模式下必须选择芯片型号"
            exit 1
          fi
          if [ ! -f "device-drivers.json" ]; then
            echo "❌ 错误：未找到device-drivers.json（同步失败）"
            exit 1
          fi
          if [ "${{ github.event.inputs.run_custom_script }}" = "true" ] && [ ! -f "scripts/custom-init.sh" ]; then
            echo "❌ 错误：未找到自定义脚本scripts/custom-init.sh"
            exit 1
          fi
          if [ ${{ github.event.inputs.rootfs_size }} -lt 32 ] || [ ${{ github.event.inputs.rootfs_size }} -gt 2048 ]; then
            echo "❌ 错误：根分区大小必须在32-2048MB之间"
            exit 1
          fi

      - name: 解析参数（主题+优化+功能）
        run: |
          theme_opt="${{ github.event.inputs.theme_and_optimization }}"
          THEME=$(echo "$theme_opt" | cut -d'-' -f1)
          COMPILER_OPT=$(echo "$theme_opt" | cut -d'-' -f2)
          ARCH=$(echo "$theme_opt" | cut -d'-' -f3)
          
          echo "THEME=$THEME" >> $GITHUB_ENV
          echo "CFLAGS=-$COMPILER_OPT" >> $GITHUB_ENV
          echo "ARCH_OPTIMIZATION=$ARCH" >> $GITHUB_ENV
          
          if [ "$COMPILER_OPT" = "O3" ] && [ "$ARCH" = "armv8" ]; then
            echo "THREADS=1" >> $GITHUB_ENV
          else
            echo "THREADS=2" >> $GITHUB_ENV
          fi

          case "${{ github.event.inputs.core_features }}" in
            "ipv6+accel")
              echo "ENABLE_IPV6=true" >> $GITHUB_ENV
              echo "ENABLE_ACCEL=true" >> $GITHUB_ENV
              ;;
            "ipv6-only")
              echo "ENABLE_IPV6=true" >> $GITHUB_ENV
              echo "ENABLE_ACCEL=false" >> $GITHUB_ENV
              ;;
            "accel-only")
              echo "ENABLE_IPV6=false" >> $GITHUB_ENV
              echo "ENABLE_ACCEL=true" >> $GITHUB_ENV
              ;;
            "none")
              echo "ENABLE_IPV6=false" >> $GITHUB_ENV
              echo "ENABLE_ACCEL=false" >> $GITHUB_ENV
              ;;
          esac

          packages="${{ github.event.inputs.packages }}"
          common_pkgs=$(echo "$packages" | tr ',' '\n' | grep -v 'luci-app-' | sed 's/^/luci-app-/g' | tr '\n' ' ')
          custom_pkgs=$(echo "$packages" | tr ',' '\n' | grep 'luci-app-' | tr '\n' ' ')
          echo "PACKAGES=$common_pkgs $custom_pkgs" >> $GITHUB_ENV

      - name: 拉取源码（带重试机制）
        run: |
          fetch_source() {
            local repo=$1
            local branch=$2
            local retries=3
            local count=0
            while [ $count -lt $retries ]; do
              if git clone --depth 1 --branch "$branch" "$repo" openwrt-src; then
                return 0
              fi
              echo "⚠️ 拉取源码失败，重试第 $((count+1)) 次..."
              count=$((count+1))
              rm -rf openwrt-src
              sleep 5
            done
            echo "❌ 拉取源码失败（已重试3次）"
            exit 1
          }

          case "${{ github.event.inputs.source_branch }}" in
            openwrt-23.05)
              fetch_source "https://git.openwrt.org/openwrt/openwrt.git" "openwrt-23.05"
              ;;
            openwrt-master)
              fetch_source "https://git.openwrt.org/openwrt/openwrt.git" "master"
              ;;
            immortalwrt-23.05)
              fetch_source "https://github.com/immortalwrt/immortalwrt.git" "openwrt-23.05"
              ;;
            immortalwrt-master)
              fetch_source "https://github.com/immortalwrt/immortalwrt.git" "master"
              ;;
          esac
          echo "SRC_DIR=$(pwd)/openwrt-src" >> $GITHUB_ENV

      - name: 初始化源码与主题源
        run: |
          cd "${{ env.SRC_DIR }}"
          ./scripts/feeds update -a
          ./scripts/feeds install -a

          if [ "${{ env.THEME }}" = "argon" ]; then
            echo 'src-git argon https://github.com/jerrykuku/luci-theme-argon.git' >> feeds.conf.default
          elif [ "${{ env.THEME }}" = "material" ]; then
            echo 'src-git material https://github.com/LuttyYang/luci-theme-material.git' >> feeds.conf.default
          fi

          if [[ "${{ env.PACKAGES }}" == *"luci-app-openclash"* && 
                ! "${{ github.event.inputs.source_branch }}" == *"immortalwrt"* ]]; then
            echo 'src-git openclash https://github.com/vernesong/OpenClash.git' >> feeds.conf.default
          fi

          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: 执行自定义初始化脚本（带错误捕获）
        if: ${{ github.event.inputs.run_custom_script == 'true' }}
        run: |
          cd "${{ env.SRC_DIR }}"
          if [ ! -f "../scripts/custom-init.sh" ]; then
            echo "❌ 错误：自定义脚本不存在"
            exit 1
          fi
          chmod +x ../scripts/custom-init.sh
          echo "🔧 执行自定义脚本..."
          if ! ../scripts/custom-init.sh; then
            echo "❌ 自定义脚本执行失败（检查语法）"
            exit 1
          fi
          echo "✅ 自定义脚本执行完成"

      - name: 解析设备/芯片配置
        run: |
          if [ "${{ github.event.inputs.select_mode }}" = "device" ]; then
            info=$(jq --arg dev "${{ github.event.inputs.device }}" '.devices[] | select(.name == $dev)' device-drivers.json)
          else
            info=$(jq --arg c "${{ github.event.inputs.chip }}" '.chips[] | select(.name == $c)' device-drivers.json)
          fi
          echo "KERNEL_TARGET=$(echo "$info" | jq -r '.kernel_target')" >> $GITHUB_ENV
          echo "DRIVERS=$(echo "$info" | jq -r '.drivers[]' | tr '\n' ' ')" >> $GITHUB_ENV

      - name: 生成编译配置
        run: |
          cd "${{ env.SRC_DIR }}"
          target=$(echo "${{ env.KERNEL_TARGET }}" | tr '/' '_')

          echo "CONFIG_TARGET_$target=y" >> .config
          echo "CONFIG_TARGET_${target}_DEVICE_generic=y" >> .config
          echo "CONFIG_TARGET_ROOTFS_PARTSIZE=${{ github.event.inputs.rootfs_size }}" >> .config

          for driver in ${{ env.DRIVERS }}; do
            echo "CONFIG_PACKAGE_$driver=y" >> .config
          done

          if [ "${{ env.ENABLE_IPV6 }}" = "true" ]; then
            echo "CONFIG_IPV6=y" >> .config
            echo "CONFIG_PACKAGE_ipv6helper=y" >> .config
          else
            echo "# CONFIG_IPV6 is not set" >> .config
          fi
          if [ "${{ env.ENABLE_ACCEL }}" = "true" ]; then
            echo "CONFIG_PACKAGE_kmod-nf-flow=y" >> .config
            if [[ "${{ env.KERNEL_TARGET }}" == "mediatek/filogic" ]]; then
              echo "CONFIG_PACKAGE_kmod-mt7981-firmware-5g=y" >> .config
            fi
          fi

          for pkg in ${{ env.PACKAGES }}; do
            echo "CONFIG_PACKAGE_$pkg=y" >> .config
          done

          echo "CONFIG_CFLAGS=${{ env.CFLAGS }}" >> .config
          echo "CONFIG_CXXFLAGS=${{ env.CFLAGS }}" >> .config
          if [ "${{ env.ARCH_OPTIMIZATION }}" = "armv8-a" ]; then
            echo "CONFIG_TARGET_OPTIMIZATION=-march=armv8-a -mtune=cortex-a53" >> .config
          elif [ "${{ env.ARCH_OPTIMIZATION }}" = "x86_64" ]; then
            echo "CONFIG_TARGET_OPTIMIZATION=-march=x86-64 -mtune=generic" >> .config
          fi

          echo "CONFIG_PACKAGE_luci-theme-${{ env.THEME }}=y" >> .config
          if [ "${{ env.THEME }}" != "bootstrap" ]; then
            echo "# CONFIG_PACKAGE_luci-theme-bootstrap is not set" >> .config
          fi
          if [ "${{ env.THEME }}" != "argon" ]; then
            echo "# CONFIG_PACKAGE_luci-theme-argon is not set" >> .config
          fi
          if [ "${{ env.THEME }}" != "material" ]; then
            echo "# CONFIG_PACKAGE_luci-theme-material is not set" >> .config
          fi

          echo "CONFIG_PACKAGE_luci=y" >> .config
          echo "CONFIG_PACKAGE_luci-ssl=y" >> .config

          make defconfig

      - name: 开始编译固件
        run: |
          cd "${{ env.SRC_DIR }}"
          make -j${{ env.THREADS }} V=s 2>&1 | tee compile.log

      - name: 编译错误分析
        if: failure()
        run: |
          cd "${{ env.SRC_DIR }}"
          echo "❌ 编译失败，错误分析："
          
          if grep -q "Killed signal terminated program cc1" compile.log; then
            echo "→ 内存不足：选择O2优化或减少软件包"
          elif grep -q "Package kmod-.* is missing" compile.log; then
            missing_pkg=$(grep "Package kmod-.* is missing" compile.log | head -n1 | awk '{print $2}')
            echo "→ 驱动缺失 $missing_pkg：1. 检查device-drivers.json；2. 切换到immortalwrt分支"
          elif grep -q "configuration error: recursive dependency" compile.log; then
            echo "→ 软件包冲突：减少勾选的软件包（如多个VPN工具）"
          else
            echo "→ 未知错误，最后50行日志："
            tail -n 50 compile.log
          fi
          exit 1

      - name: 固件信息与重命名
        run: |
          base_name="${{ github.event.inputs.device || github.event.inputs.chip }}-${{ github.event.inputs.source_branch }}-${{ env.THEME }}"
          firmware_name="${base_name}-$(date +%Y%m%d)-${{ github.event.inputs.firmware_suffix }}"
          find "${{ env.SRC_DIR }}/bin/targets/" -name "*.bin" -exec sh -c '
            for file do
              mv "$file" "${file%.bin}-$1.bin"
            done
          ' _ "$firmware_name" \;
          
          echo "📌 固件类型说明："
          echo "  - 含'sysupgrade'：用于设备升级（保留配置）"
          echo "  - 含'factory'：用于首次刷写（清空配置）"
          find "${{ env.SRC_DIR }}/bin/targets/" -name "*.bin" | grep -E "sysupgrade|factory" | while read -r file; do
            echo "  - $file"
          done

      - name: 上传编译成果
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: "${{ github.event.inputs.device || github.event.inputs.chip }}-firmware-${{ github.run_id }}"
          path: |
            ${{ env.SRC_DIR }}/bin/targets/**/*.bin
            ${{ env.SRC_DIR }}/compile.log
          retention-days: 30
          if-no-files-found: error

      - name: 拉取源码（带重试）
        run: |
          # 定义拉取函数（最多重试3次）
          fetch_source() {
            local repo=$1
            local branch=$2
            local retries=3
            local count=0
            while [ $count -lt $retries ]; do
              if git clone --depth 1 --branch "$branch" "$repo" openwrt-src; then
                return 0
              fi
              echo "⚠️ 拉取源码失败，重试第 $((count+1)) 次..."
              count=$((count+1))
              rm -rf openwrt-src  # 清理失败的目录
              sleep 5  # 等待5秒再重试
            done
            echo "❌ 拉取源码失败（已重试3次）"
            exit 1
          }

          # 选择仓库并调用拉取函数
          case "${{ github.event.inputs.source_branch }}" in
            openwrt-23.05)
              fetch_source "https://git.openwrt.org/openwrt/openwrt.git" "openwrt-23.05"
              ;;
            openwrt-master)
              fetch_source "https://git.openwrt.org/openwrt/openwrt.git" "master"
              ;;
            immortalwrt-23.05)
              fetch_source "https://github.com/immortalwrt/immortalwrt.git" "openwrt-23.05"
              ;;
            immortalwrt-master)
              fetch_source "https://github.com/immortalwrt/immortalwrt.git" "master"
              ;;
          esac
          echo "SRC_DIR=$(pwd)/openwrt-src" >> $GITHUB_ENV
        
      - name: 拉取源码（带重试）
        run: |
          # 定义拉取函数（最多重试3次）
          fetch_source() {
            local repo=$1
            local branch=$2
            local retries=3
            local count=0
            while [ $count -lt $retries ]; do
              if git clone --depth 1 --branch "$branch" "$repo" openwrt-src; then
                return 0
              fi
              echo "⚠️ 拉取源码失败，重试第 $((count+1)) 次..."
              count=$((count+1))
              rm -rf openwrt-src  # 清理失败的目录
              sleep 5  # 等待5秒再重试
            done
            echo "❌ 拉取源码失败（已重试3次）"
            exit 1
          }

          # 选择仓库并调用拉取函数
          case "${{ github.event.inputs.source_branch }}" in
            openwrt-23.05)
              fetch_source "https://git.openwrt.org/openwrt/openwrt.git" "openwrt-23.05"
              ;;
            openwrt-master)
              fetch_source "https://git.openwrt.org/openwrt/openwrt.git" "master"
              ;;
            immortalwrt-23.05)
              fetch_source "https://github.com/immortalwrt/immortalwrt.git" "openwrt-23.05"
              ;;
            immortalwrt-master)
              fetch_source "https://github.com/immortalwrt/immortalwrt.git" "master"
              ;;
          esac
          echo "SRC_DIR=$(pwd)/openwrt-src" >> $GITHUB_ENV
     
      - name: 输出固件类型说明
        run: |
          echo "📌 固件类型说明："
          echo "  - 含 'sysupgrade' 的文件：用于设备升级（保留配置）"
          echo "  - 含 'factory' 的文件：用于首次刷写（清空配置）"
          find "${{ env.SRC_DIR }}/bin/targets/" -name "*.bin" | grep -E "sysupgrade|factory" | while read -r file; do
            echo "  - $file"
          done
      
      - name: 清理编译缓存（首次运行或版本切换时）
        run: |
          if [ -d "openwrt-src" ]; then
            echo "🧹 清理旧编译目录..."
            rm -rf openwrt-src
          fi
        if: ${{ github.event.inputs.source_branch != github.event.repository.default_branch }}  # 版本切换时触发
      
      - name: 固件信息摘要
        run: |
          firmware_path=$(find "${{ env.SRC_DIR }}/bin/targets/" -name "*.bin" | head -n1)
          if [ -n "$firmware_path" ]; then
            echo "📊 固件信息："
            echo "  - 路径：$firmware_path"
            echo "  - 大小：$(du -h "$firmware_path" | awk '{print $1}')"
            echo "  - 适用设备：${{ github.event.inputs.device || github.event.inputs.chip }}"
            echo "  - 源码版本：${{ github.event.inputs.source_branch }}"
            echo "  - 主题：${{ env.THEME }}"
          fi
          
