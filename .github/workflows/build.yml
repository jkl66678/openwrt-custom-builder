name: 全功能OpenWrt编译系统（精简版）

on:
  workflow_dispatch:
    inputs:
      # 1. 编译模式（设备/芯片）
      select_mode:
        type: choice
        description: 编译模式（设备/芯片）
        required: true
        options: [device, chip]

      # 2. 设备选择（仅设备模式）
      device:
        type: choice
        description: 设备型号（仅设备模式）
        required: false
        options: [cuby-tr3000-256mb, redmi-ac2100, x86_64-generic]

      # 3. 芯片选择（仅芯片模式）
      chip:
        type: choice
        description: 芯片型号（仅芯片模式）
        required: false
        options: [mt7981, mt7621, ipq8065, x86_64]

      # 4. 源码版本
      source_branch:
        type: choice
        description: 源码分支（含内核）
        required: true
        options: [openwrt-23.05, openwrt-master, immortalwrt-23.05, immortalwrt-master]

      # 5. 根分区大小
      rootfs_size:
        type: number
        description: 根分区大小(MB，≤2048)
        required: true
        default: 192

      # 6. 核心功能（合并IPv6+硬件加速）
      core_features:
        type: choice
        description: 核心功能配置
        required: true
        options:
          - ipv6+accel  # 启用IPv6+硬件加速（推荐）
          - ipv6-only   # 仅启用IPv6
          - accel-only  # 仅启用硬件加速
          - none        # 都不启用

      # 7. 软件包（合并常用+自定义）
      packages:
        type: string
        description: 软件包（格式：常用包+自定义包，用逗号分隔，如"openclash,samba,luci-app-wireguard"）
        required: false
        default: "openclash,samba"

      # 8. 编译优化
      optimization:
        type: choice
        description: 编译优化配置
        required: true
        options:
          - O2-generic   # O2优化+通用架构（平衡）
          - O3-armv8     # O3优化+ARMv8（MT7981等）
          - O3-x86       # O3优化+x86_64（软路由）
          - Os-generic   # 最小体积+通用架构

      # 9. 固件后缀
      firmware_suffix:
        type: string
        description: 固件后缀（如版本号）
        required: false
        default: "custom"

      # 10. 高级选项（自定义脚本）
      run_custom_script:
        type: boolean
        description: 执行自定义初始化脚本
        required: true
        default: true


jobs:
  build-firmware:
    name: 编译固件
    runs-on: ubuntu-latest
    steps:
      - name: 拉取仓库代码
        uses: actions/checkout@v4

      - name: 环境准备
        run: |
          sudo apt update
          sudo apt install -y build-essential libncurses5-dev zlib1g-dev gawk git gettext libssl-dev wget unzip python3 jq

      - name: 编译前自检
        run: |
          # 检查模式与选择匹配
          if [ "${{ github.event.inputs.select_mode }}" = "device" ] && [ -z "${{ github.event.inputs.device }}" ]; then
            echo "❌ 错误：设备模式下必须选择设备型号"
            exit 1
          fi
          if [ "${{ github.event.inputs.select_mode }}" = "chip" ] && [ -z "${{ github.event.inputs.chip }}" ]; then
            echo "❌ 错误：芯片模式下必须选择芯片型号"
            exit 1
          fi

          # 检查分区大小
          if [ ${{ github.event.inputs.rootfs_size }} -lt 32 ] || [ ${{ github.event.inputs.rootfs_size }} -gt 2048 ]; then
            echo "❌ 错误：根分区大小必须在32-2048MB之间"
            exit 1
          fi

      - name: 解析参数（处理合并的选项）
        run: |
          # 解析核心功能（IPv6+硬件加速）
          case "${{ github.event.inputs.core_features }}" in
            "ipv6+accel")
              echo "ENABLE_IPV6=true" >> $GITHUB_ENV
              echo "ENABLE_ACCEL=true" >> $GITHUB_ENV
              ;;
            "ipv6-only")
              echo "ENABLE_IPV6=true" >> $GITHUB_ENV
              echo "ENABLE_ACCEL=false" >> $GITHUB_ENV
              ;;
            "accel-only")
              echo "ENABLE_IPV6=false" >> $GITHUB_ENV
              echo "ENABLE_ACCEL=true" >> $GITHUB_ENV
              ;;
            "none")
              echo "ENABLE_IPV6=false" >> $GITHUB_ENV
              echo "ENABLE_ACCEL=false" >> $GITHUB_ENV
              ;;
          esac

          # 解析软件包（拆分常用包和自定义包）
          packages="${{ github.event.inputs.packages }}"
          # 常用包前缀处理（添加luci-app-）
          common_pkgs=$(echo "$packages" | tr ',' '\n' | grep -v 'luci-app-' | sed 's/^/luci-app-/g' | tr '\n' ' ')
          # 自定义包（保留原始名称）
          custom_pkgs=$(echo "$packages" | tr ',' '\n' | grep 'luci-app-' | tr '\n' ' ')
          echo "PACKAGES=$common_pkgs $custom_pkgs" >> $GITHUB_ENV

          # 解析编译优化
          case "${{ github.event.inputs.optimization }}" in
            "O2-generic")
              echo "CFLAGS=-O2" >> $GITHUB_ENV
              echo "ARCH_OPTIMIZATION=generic" >> $GITHUB_ENV
              echo "THREADS=2" >> $GITHUB_ENV
              ;;
            "O3-armv8")
              echo "CFLAGS=-O3" >> $GITHUB_ENV
              echo "ARCH_OPTIMIZATION=armv8-a" >> $GITHUB_ENV
              echo "THREADS=1" >> $GITHUB_ENV  # O3+ARMv8内存占用高，用单线程
              ;;
            "O3-x86")
              echo "CFLAGS=-O3" >> $GITHUB_ENV
              echo "ARCH_OPTIMIZATION=x86_64" >> $GITHUB_ENV
              echo "THREADS=2" >> $GITHUB_ENV
              ;;
            "Os-generic")
              echo "CFLAGS=-Os" >> $GITHUB_ENV
              echo "ARCH_OPTIMIZATION=generic" >> $GITHUB_ENV
              echo "THREADS=2" >> $GITHUB_ENV
              ;;
          esac

      - name: 拉取源码
        run: |
          case "${{ github.event.inputs.source_branch }}" in
            openwrt-23.05)
              repo="https://git.openwrt.org/openwrt/openwrt.git"
              branch="openwrt-23.05"
              ;;
            openwrt-master)
              repo="https://git.openwrt.org/openwrt/openwrt.git"
              branch="master"
              ;;
            immortalwrt-23.05)
              repo="https://github.com/immortalwrt/immortalwrt.git"
              branch="openwrt-23.05"
              ;;
            immortalwrt-master)
              repo="https://github.com/immortalwrt/immortalwrt.git"
              branch="master"
              ;;
          esac
          git clone --depth 1 --branch "$branch" "$repo" openwrt-src
          echo "SRC_DIR=$(pwd)/openwrt-src" >> $GITHUB_ENV

      - name: 初始化源码与Feeds
        run: |
          cd "${{ env.SRC_DIR }}"
          ./scripts/feeds update -a
          ./scripts/feeds install -a

          # 添加Argon主题
          echo 'src-git argon https://github.com/jerrykuku/luci-theme-argon.git' >> feeds.conf.default

          # 添加OpenClash（非ImmortalWrt分支）
          if [[ "${{ env.PACKAGES }}" == *"luci-app-openclash"* && 
                ! "${{ github.event.inputs.source_branch }}" == *"immortalwrt"* ]]; then
            echo 'src-git openclash https://github.com/vernesong/OpenClash.git' >> feeds.conf.default
          fi

          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: 执行自定义脚本
        if: ${{ github.event.inputs.run_custom_script == 'true' }}
        run: |
          cd "${{ env.SRC_DIR }}"
          chmod +x ../scripts/custom-init.sh
          ../scripts/custom-init.sh

      - name: 解析设备/芯片配置
        run: |
          if [ "${{ github.event.inputs.select_mode }}" = "device" ]; then
            info=$(jq --arg dev "${{ github.event.inputs.device }}" '.devices[] | select(.name == $dev)' device-drivers.json)
          else
            info=$(jq --arg c "${{ github.event.inputs.chip }}" '.chips[] | select(.name == $c)' device-drivers.json)
          fi
          echo "KERNEL_TARGET=$(echo "$info" | jq -r '.kernel_target')" >> $GITHUB_ENV
          echo "DRIVERS=$(echo "$info" | jq -r '.drivers[]' | tr '\n' ' ')" >> $GITHUB_ENV

      - name: 生成编译配置
        run: |
          cd "${{ env.SRC_DIR }}"
          target=$(echo "${{ env.KERNEL_TARGET }}" | tr '/' '_')

          # 基础配置
          echo "CONFIG_TARGET_$target=y" >> .config
          echo "CONFIG_TARGET_${target}_DEVICE_generic=y" >> .config
          echo "CONFIG_TARGET_ROOTFS_PARTSIZE=${{ github.event.inputs.rootfs_size }}" >> .config

          # 驱动
          for driver in ${{ env.DRIVERS }}; do
            echo "CONFIG_PACKAGE_$driver=y" >> .config
          done

          # 核心功能（IPv6+硬件加速）
          if [ "${{ env.ENABLE_IPV6 }}" = "true" ]; then
            echo "CONFIG_IPV6=y" >> .config
            echo "CONFIG_PACKAGE_ipv6helper=y" >> .config
          fi
          if [ "${{ env.ENABLE_ACCEL }}" = "true" ]; then
            echo "CONFIG_PACKAGE_kmod-nf-flow=y" >> .config
            if [[ "${{ env.KERNEL_TARGET }}" == "mediatek/filogic" ]]; then
              echo "CONFIG_PACKAGE_kmod-mt7981-firmware-5g=y" >> .config
            fi
          fi

          # 软件包
          for pkg in ${{ env.PACKAGES }}; do
            echo "CONFIG_PACKAGE_$pkg=y" >> .config
          done

          # 编译优化
          echo "CONFIG_CFLAGS=${{ env.CFLAGS }}" >> .config
          echo "CONFIG_CXXFLAGS=${{ env.CFLAGS }}" >> .config
          if [ "${{ env.ARCH_OPTIMIZATION }}" = "armv8-a" ]; then
            echo "CONFIG_TARGET_OPTIMIZATION=-march=armv8-a -mtune=cortex-a53" >> .config
          elif [ "${{ env.ARCH_OPTIMIZATION }}" = "x86_64" ]; then
            echo "CONFIG_TARGET_OPTIMIZATION=-march=x86-64 -mtune=generic" >> .config
          fi

          # Web界面与主题
          echo "CONFIG_PACKAGE_luci=y" >> .config
          echo "CONFIG_PACKAGE_luci-ssl=y" >> .config
          echo "CONFIG_PACKAGE_luci-theme-argon=y" >> .config

          make defconfig

      - name: 编译固件
        run: |
          cd "${{ env.SRC_DIR }}"
          make -j${{ env.THREADS }} V=s 2>&1 | tee compile.log

      - name: 错误处理与上传
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: ${{ github.event.inputs.device || github.event.inputs.chip }}-firmware
          path: |
            ${{ env.SRC_DIR }}/bin/targets/**/*.bin
            ${{ env.SRC_DIR }}/compile.log
          retention-days: 30
