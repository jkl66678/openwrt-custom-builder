name: 设备列表自动同步

on:
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * 0"

jobs:
  sync-devices:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: write

    steps:
      - name: 拉取仓库代码
        uses: actions/checkout@v4

      - name: 安装依赖
        run: |
          sudo apt update && sudo apt install -y git jq dos2unix python3 python3-pip
          pip3 install PyJWT cryptography

      - name: 准备脚本文件
        run: |
          [ -f "scripts/sync-devices.sh" ] || { echo "❌ 缺少同步脚本"; exit 1; }
          [ -f "scripts/generate_jwt.py" ] || { echo "❌ 缺少JWT生成脚本"; exit 1; }
          dos2unix scripts/*.sh && chmod +x scripts/*.sh
          chmod +x scripts/generate_jwt.py

      - name: 执行同步脚本
        run: |
          mkdir -p sync-logs
          ./scripts/sync-devices.sh > sync-logs/sync-detail.log 2>&1 || { cat sync-logs/sync-detail.log; exit 1; }

      - name: 生成工作流文件（可选）
        run: |
          if [ -f "scripts/generate-workflow.sh" ]; then
            ./scripts/generate-workflow.sh
          fi

      - name: 生成GitHub App访问令牌
        run: |
          APP_ID=${{ secrets.GH_APP_ID }}
          PRIVATE_KEY="${{ secrets.GH_APP_PRIVATE_KEY }}"
          
          echo "$PRIVATE_KEY" > /tmp/key.pem
          chmod 600 /tmp/key.pem
          
          grep -q "-----BEGIN RSA PRIVATE KEY-----" /tmp/key.pem || { echo "❌ 私钥格式错误"; exit 1; }
          grep -q "-----END RSA PRIVATE KEY-----" /tmp/key.pem || { echo "❌ 私钥格式错误"; exit 1; }
          
          JWT=$(python3 scripts/generate_jwt.py "$APP_ID" /tmp/key.pem | grep "JWT=" | cut -d'=' -f2)
          [ -n "$JWT" ] || { echo "❌ JWT生成失败"; exit 1; }
          
          INSTALLATION_ID=$(curl -s -H "Authorization: Bearer $JWT" \
            "https://api.github.com/app/installations" | jq -r '.[] | select(.repositories[0].name == "openwrt-custom-builder") | .id')
          [ "$INSTALLATION_ID" != "null" ] || { echo "❌ 未找到安装记录"; exit 1; }
          
          ACCESS_TOKEN=$(curl -s -X POST -H "Authorization: Bearer $JWT" \
            "https://api.github.com/app/installations/$INSTALLATION_ID/access_tokens" | jq -r '.token')
          [ "$ACCESS_TOKEN" != "null" ] || { echo "❌ 令牌生成失败"; exit 1; }
          
          echo "ACCESS_TOKEN=$ACCESS_TOKEN" >> $GITHUB_ENV
          rm -f /tmp/key.pem

      - name: 提交更新
        run: |
          git config --global user.name "Sync Bot"
          git config --global user.email "bot@example.com"
          git remote set-url origin "https://x-access-token:${{ env.ACCESS_TOKEN }}@github.com/jkl66678/openwrt-custom-builder.git"
          
          git add device-drivers.json .github/workflows/build.yml sync-logs/
          if ! git diff --cached --quiet; then
            git commit -m "自动更新设备列表（$(date +%Y%m%d)）" && git push origin main
          fi

      - name: 上传结果
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sync-results-${{ github.run_id }}
          path:  # 第91行修复：确保列表项缩进正确（与path字段保持2空格缩进）
            - sync-logs/
            - device-drivers.json
          retention-days: 14
