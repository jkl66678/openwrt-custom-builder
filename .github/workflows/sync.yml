name: 设备列表同步与编译选项自动更新

on:
  workflow_dispatch:  # 手动触发
  schedule:
    - cron: "0 0 * * 0"  # 每周日自动执行

jobs:
  sync-devices:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # 仅需此权限，GITHUB_TOKEN默认包含工作流修改权限

    steps:
      - name: 拉取仓库代码（禁用默认凭据缓存）
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          persist-credentials: false  # 关键：禁用默认凭据缓存，避免旧认证信息干扰

      - name: 安装依赖工具
        run: |
          sudo apt update -qq > /dev/null 2>&1
          sudo apt install -y -qq git jq dos2unix build-essential libncurses5-dev \
            zlib1g-dev gawk gettext libssl-dev xsltproc wget unzip python3 python3-pip
          
          # 验证关键工具
          for tool in git jq awk python3; do
            if ! command -v "$tool" &> /dev/null; then
              echo "❌ 缺失必要工具: $tool"
              exit 1
            fi
          done
          echo "✅ 依赖工具安装完成"

      - name: 配置同步脚本权限
        run: |
          if [ ! -f "scripts/sync-devices.sh" ]; then
            echo "❌ 同步脚本不存在: scripts/sync-devices.sh"
            exit 1
          fi
          chmod +x scripts/sync-devices.sh
          echo "✅ 同步脚本权限配置完成"

      - name: 执行设备列表同步（核心步骤）
        run: |
          echo "📝 开始从OpenWrt源码同步设备列表..."
          ./scripts/sync-devices.sh || {
            echo "❌ 同步脚本执行失败，查看sync-logs获取详情"
            exit 1
          }
          # 验证生成结果
          if [ ! -f "device-drivers.json" ] || [ $(jq '.devices | length' "device-drivers.json") -eq 0 ]; then
            echo "❌ 设备列表生成失败或为空"
            exit 1
          fi
          echo "✅ 设备列表同步完成，共发现 $(jq '.devices | length' "device-drivers.json") 个设备"

      - name: 生成更新build.yml
        run: |
          if [ ! -f "scripts/generate-workflow.sh" ]; then
            echo "❌ 生成脚本不存在: scripts/generate-workflow.sh"
            exit 1
          fi
          chmod +x scripts/generate-workflow.sh
          
          ./scripts/generate-workflow.sh || {
            echo "❌ 生成build.yml失败"
            exit 1
          }
          echo "✅ build.yml已更新为最新设备选项"

      - name: 提交更新到仓库（终极认证方案）
        run: |
          # 配置官方机器人身份（与GitHub App彻底区分）
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          # 【关键1】彻底清除所有Git凭据缓存
          git credential-cache exit
          rm -f ~/.git-credentials
          
          # 【关键2】重新配置远程仓库，强制使用GITHUB_TOKEN
          git remote remove origin
          git remote add origin "https://github.com/jkl66678/openwrt-custom-builder.git"
          
          # 【关键3】显式设置Git凭据，确保使用GITHUB_TOKEN
          echo "https://github.com" | git credential approve <<EOF
          username=github-actions[bot]
          password=${{ github.token }}
          EOF
          
          # 【调试】确认凭据配置
          echo "当前Git配置用户："
          git config user.name
          git config user.email
          echo "当前远程仓库："
          git remote -v
          
          # 添加所有变更文件（覆盖所有可能修改的文件）
          git add .github/workflows/build.yml device-drivers.json sync-logs/ scripts/
          
          # 检查是否有变更
          if git diff --cached --quiet; then
            echo "ℹ️ 无变更内容，无需提交"
            exit 0
          fi
          
          # 暂存未提交的更改
          git stash push -u -m "temp stash before pull" || echo "ℹ️ 没有需要暂存的内容"
          
          # 拉取远程最新代码
          if ! git pull --rebase origin main; then
            echo "⚠️ rebase失败，尝试普通拉取"
            git pull origin main || {
              echo "❌ 拉取远程代码失败，请检查网络"
              exit 1
            }
          fi
          
          # 恢复暂存的更改
          if git stash list | grep -q "temp stash before pull"; then
            git stash pop || {
              echo "⚠️ 恢复暂存内容冲突，已保留文件"
            }
          fi
          
          # 再次暂存所有变更
          git add .github/workflows/build.yml device-drivers.json sync-logs/ scripts/
          
          # 提交（带时间戳）
          commit_msg="自动同步设备列表（$(date +"%Y-%m-%d %H:%M")）"
          git commit -m "$commit_msg" || {
            echo "ℹ️ 无新变更可提交"
            exit 0
          }
          
          # 【关键4】强制使用令牌URL推送，绕过所有本地配置
          git push "https://x-access-token:${{ github.token }}@github.com/jkl66678/openwrt-custom-builder.git" main || {
            echo "❌ 推送失败，最后的可能原因："
            echo "1. 仓库仍有GitHub App残留（请再次检查Settings → Integrations）"
            echo "2. 组织级别的安全策略限制（联系组织管理员）"
            exit 1
          }
          echo "✅ 成功推送更新到远程仓库"

      - name: 上传同步日志（调试用）
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sync-debug-logs-${{ github.run_id }}
          path: |
            sync-logs/
            device-drivers.json
            .github/workflows/build.yml
          retention-days: 14
