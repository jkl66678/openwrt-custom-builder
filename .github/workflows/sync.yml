name: 设备列表自动同步

on:
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * 0"  # 每周日执行

jobs:
  sync-devices:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: write

    steps:
      - name: 拉取仓库代码
        uses: actions/checkout@v4

      - name: 安装依赖工具
        run: |
          sudo apt update && sudo apt install -y git jq dos2unix python3 python3-pip
          pip3 install PyJWT cryptography
          # 验证依赖是否安装成功
          [ -x "$(command -v jq)" ] || { echo "❌ jq安装失败"; exit 1; }
          [ -x "$(command -v python3)" ] || { echo "❌ Python3安装失败"; exit 1; }

      - name: 检查并准备脚本
        run: |
          # 验证核心脚本存在性
          required_scripts=("sync-devices.sh" "generate_jwt.py")
          for script in "${required_scripts[@]}"; do
            if [ ! -f "scripts/$script" ]; then
              echo "❌ 缺少必要脚本：scripts/$script"
              exit 1
            fi
          done
          # 转换格式并添加执行权限
          dos2unix scripts/*.sh
          chmod +x scripts/*.sh scripts/generate_jwt.py

      - name: 执行设备同步脚本
        run: |
          mkdir -p sync-logs
          # 执行同步并捕获日志
          ./scripts/sync-devices.sh > sync-logs/sync-output.log 2>&1 || {
            echo "❌ 同步脚本执行失败，日志如下："
            cat sync-logs/sync-output.log
            exit 1
          }
          echo "✅ 设备同步完成"

      - name: 生成GitHub App访问令牌
        run: |
          # 从secrets获取配置
          APP_ID="${{ secrets.GH_APP_ID }}"
          PRIVATE_KEY="${{ secrets.GH_APP_PRIVATE_KEY }}"
          TMP_KEY="/tmp/github-app-key.pem"

          # 写入私钥到临时文件
          echo "$PRIVATE_KEY" > "$TMP_KEY"
          chmod 600 "$TMP_KEY"

          # 验证私钥格式（关键修复：使用--避免grep误判选项）
          if ! grep -q -- "-----BEGIN RSA PRIVATE KEY-----" "$TMP_KEY"; then
            echo "❌ 私钥缺少开头标记"
            exit 1
          fi
          if ! grep -q -- "-----END RSA PRIVATE KEY-----" "$TMP_KEY"; then
            echo "❌ 私钥缺少结尾标记"
            exit 1
          fi
          echo "✅ 私钥格式验证通过"

          # 生成JWT
          JWT=$(python3 scripts/generate_jwt.py "$APP_ID" "$TMP_KEY" | grep "JWT=" | cut -d'=' -f2)
          if [ -z "$JWT" ]; then
            echo "❌ JWT生成失败"
            exit 1
          fi
          echo "✅ JWT生成成功（前20字符）：${JWT:0:20}..."

          # 获取安装ID
          INSTALLATION_RESPONSE=$(curl -s -H "Authorization: Bearer $JWT" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/app/installations")
          INSTALLATION_ID=$(echo "$INSTALLATION_RESPONSE" | jq -r '.[] | select(.repositories[0].name == "openwrt-custom-builder") | .id')
          if [ "$INSTALLATION_ID" = "null" ] || [ -z "$INSTALLATION_ID" ]; then
            echo "❌ 未找到仓库安装记录，响应：$INSTALLATION_RESPONSE"
            exit 1
          fi
          echo "✅ 安装ID：$INSTALLATION_ID"

          # 获取访问令牌
          ACCESS_TOKEN_RESPONSE=$(curl -s -X POST \
            -H "Authorization: Bearer $JWT" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/app/installations/$INSTALLATION_ID/access_tokens")
          ACCESS_TOKEN=$(echo "$ACCESS_TOKEN_RESPONSE" | jq -r '.token')
          if [ "$ACCESS_TOKEN" = "null" ] || [ -z "$ACCESS_TOKEN" ]; then
            echo "❌ 访问令牌生成失败，响应：$ACCESS_TOKEN_RESPONSE"
            exit 1
          fi
          echo "ACCESS_TOKEN=$ACCESS_TOKEN" >> "$GITHUB_ENV"
          rm -f "$TMP_KEY"

      - name: 提交同步结果
        run: |
          git config --global user.name "Sync Bot"
          git config --global user.email "bot@example.com"
          git remote set-url origin "https://x-access-token:${{ env.ACCESS_TOKEN }}@github.com/jkl66678/openwrt-custom-builder.git"
          
          # 仅在有变更时提交
          git add device-drivers.json .github/workflows/build.yml sync-logs/
          if ! git diff --cached --quiet; then
            git commit -m "自动同步设备列表（$(date +%Y-%m-%d)）"
            git push origin main
            echo "✅ 提交更新成功"
          else
            echo "ℹ️ 无变更，无需提交"
          fi

      - name: 上传同步日志
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sync-logs-${{ github.run_id }}
          path: sync-logs/
          retention-days: 14
