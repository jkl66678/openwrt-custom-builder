name: OpenWrt设备与芯片同步（完整版）

on:
  workflow_dispatch:
  schedule:
    - cron: "0 2 * * *"  # 每天凌晨2点同步

jobs:
  sync-devices:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      # 1. 拉取代码
      - name: 拉取仓库
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main

      # 2. 调试：显示目录结构
      - name: 查看工作目录
        run: |
          echo "工作区: $(pwd)"
          ls -la
          ls -la scripts/ || echo "scripts目录不存在"

      # 3. 安装依赖
      - name: 安装工具
        run: |
          sudo apt update -y
          sudo apt install -y git jq dos2unix

      # 4. 准备脚本
      - name: 修复脚本格式
        run: |
          if [ ! -f "scripts/sync-devices.sh" ]; then
            echo "❌ 未找到脚本"
            exit 1
          fi
          dos2unix scripts/sync-devices.sh
          chmod +x scripts/sync-devices.sh
          head -n1 scripts/sync-devices.sh  # 验证shebang

      # 5. 执行同步脚本
      - name: 运行同步
        run: |
          ./scripts/sync-devices.sh || {
            echo "❌ 脚本执行失败，日志:"
            cat sync-logs/sync-detail.log
            exit 1
          }

      # 6. 验证输出文件
      - name: 检查生成结果
        if: always()
        run: |
          echo "设备文件内容:"
          cat device-drivers.json || echo "文件不存在"
          echo "设备数量:"
          jq '.devices | length' device-drivers.json || echo "0"
          echo "日志目录:"
          ls -la sync-logs/ || echo "日志目录不存在"

      # 7. 更新build.yml
      - name: 更新编译选项
        run: |
          DEVICES=$(jq -r '.devices[].name | sort | uniq' device-drivers.json | tr '\n' ',' | sed 's/,$//')
          CHIPS=$(jq -r '.chips[].name | sort | uniq' device-drivers.json | tr '\n' ',' | sed 's/,$//')
          [ -z "$DEVICES" ] && DEVICES="test-device"
          [ -z "$CHIPS" ] && CHIPS="test-chip"
          
          echo "更新设备: $DEVICES"
          echo "更新芯片: $CHIPS"
          
          # 替换build.yml中的标记
          sed -i "s/options: \[.*\]  # AUTO-SYNC-DEVICES/options: [$DEVICES]  # AUTO-SYNC-DEVICES/" .github/workflows/build.yml
          sed -i "s/options: \[.*\]  # AUTO-SYNC-CHIPS/options: [$CHIPS]  # AUTO-SYNC-CHIPS/" .github/workflows/build.yml

      # 8. 提交更新（处理Git冲突）
      - name: 提交到仓库
        run: |
          git config --global user.name "OpenWrt Sync Bot"
          git config --global user.email "sync@example.com"
          
          # 检查变更
          if git diff --quiet device-drivers.json .github/workflows/build.yml; then
            echo "⚠️ 无更新，无需提交"
            exit 0
          fi
          
          # 暂存修改以解决冲突
          git add device-drivers.json .github/workflows/build.yml
          git stash  # 暂存本地更改
          
          # 拉取远程最新代码
          git pull --rebase origin main
          
          # 应用暂存的修改
          if ! git stash pop; then
            echo "⚠️ 冲突，手动合并"
            git add device-drivers.json .github/workflows/build.yml
            git commit -m "合并冲突：同步设备列表（$(date +%Y-%m-%d)）"
          fi
          
          # 提交并推送
          git commit -m "自动同步设备与芯片（$(date +%Y-%m-%d)）" || echo "⚠️ 无新提交"
          git push origin main || echo "⚠️ 推送失败，可能需要手动处理"

      # 9. 上传日志和结果（强制路径正确）
      - name: 上传 artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sync-results-${{ github.run_id }}
          path: |
            ${{ github.workspace }}/sync-logs/
            ${{ github.workspace }}/device-drivers.json
            ${{ github.workspace }}/.github/workflows/build.yml
          retention-days: 14

    concurrency:
      group: openwrt-sync
      cancel-in-progress: true
