name: 设备数据与工作流同步

on:
  workflow_dispatch:
  schedule:
    - cron: '0 3 * * *'

env:
  LC_ALL: en_US.UTF-8
  LANG: en_US.UTF-8
  LANGUAGE: en_US.UTF-8
  TZ: Asia/Shanghai

jobs:
  sync-and-generate:
    name: 同步设备信息并生成工作流
    runs-on: ubuntu-22.04
    timeout-minutes: 240

    steps:
      - name: 拉取代码仓库
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          lfs: true
          path: ./openwrt-builder

      - name: 进入工作目录
        run: |
          cd openwrt-builder
          pwd

      - name: 安装系统依赖（修复yamlfmt路径问题）
        run: |
          cd openwrt-builder
          sudo apt update -y --fix-missing
          
          sudo apt install -y \
            build-essential git jq grep sed gawk \
            file gcc g++ dos2unix curl wget zip unzip \
            snapd locales
          
          # 配置UTF-8编码
          sudo locale-gen en_US.UTF-8
          sudo update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8
          echo "当前系统编码: $(locale)"
          
          # 安装Go（带容错机制）
          echo "获取最新Go稳定版..."
          MAX_RETRIES=3
          DEFAULT_GO_VERSION="1.22.5"
          GO_LATEST_TAG="null"
          
          for ((i=1; i<=MAX_RETRIES; i++)); do
            echo "尝试第$i次请求GitHub API..."
            GO_LATEST_TAG=$(curl -s --retry 3 --connect-timeout 10 "https://api.github.com/repos/golang/go/releases/latest" | jq -r '.tag_name')
            if [ "$GO_LATEST_TAG" != "null" ] && [ -n "$GO_LATEST_TAG" ]; then
              echo "API请求成功，获取到最新版本标签: $GO_LATEST_TAG"
              break
            fi
            sleep 2
          done
          
          if [ "$GO_LATEST_TAG" = "null" ] || [ -z "$GO_LATEST_TAG" ]; then
            echo "⚠️ 无法获取最新Go版本，使用默认稳定版: $DEFAULT_GO_VERSION"
            GO_LATEST_TAG="go$DEFAULT_GO_VERSION"
          fi
          
          GO_LATEST_VERSION=$(echo "$GO_LATEST_TAG" | sed 's/^go//')
          echo "最终使用的Go版本: $GO_LATEST_VERSION"
          
          GO_TAR="go${GO_LATEST_VERSION}.linux-amd64.tar.gz"
          if ! wget "https://dl.google.com/go/${GO_TAR}" -O /tmp/${GO_TAR}; then
            echo "❌ 谷歌官方源下载失败，切换到备用源..."
            if ! wget "https://gomirrors.org/dl/go/${GO_TAR}" -O /tmp/${GO_TAR}; then
              echo "❌ 所有源下载失败，终止流程"
              exit 1
            fi
          fi
          
          sudo rm -rf /usr/local/go
          sudo tar -C /usr/local -xzf /tmp/${GO_TAR}
          export PATH="/usr/local/go/bin:$PATH"
          go version
          
          # 安装yamlfmt（关键修复：显式设置GOPATH并验证安装路径）
          echo "安装最新版yamlfmt..."
          # 显式设置GOPATH（避免默认路径问题）
          export GOPATH="$HOME/go"
          # 确保GOPATH/bin目录存在
          mkdir -p "$GOPATH/bin"
          # 安装yamlfmt
          go install github.com/google/yamlfmt/cmd/yamlfmt@latest
          # 同时添加到当前会话的PATH和GitHub持久化PATH
          export PATH="$GOPATH/bin:$PATH"
          echo "$GOPATH/bin" >> $GITHUB_PATH
          # 验证yamlfmt是否安装成功
          if [ ! -f "$GOPATH/bin/yamlfmt" ]; then
            echo "❌ yamlfmt安装失败，未在$GOPATH/bin找到可执行文件"
            exit 1
          fi
          echo "yamlfmt安装路径: $(which yamlfmt)"
          yamlfmt --version  # 提前验证命令可用性
          
          # 安装yq
          echo "安装最新版yq..."
          sudo snap install yq
          yq --version
          
          # 验证所有工具
          echo "===== 工具版本验证 ====="
          jq --version
          yq --version
          yamlfmt --version  # 再次验证
          git --version
          gawk --version
          go version
          echo "======================="

      - name: 准备脚本文件
        run: |
          cd openwrt-builder
          mkdir -p scripts sync-logs configs
          find scripts -name "*.sh" -exec chmod +x {} \;
          find scripts -name "*.sh" -exec dos2unix {} \;
          echo "===== 脚本编码验证 ====="
          find scripts -name "*.sh" -exec file -i {} \;
          echo "======================="

      - name: 执行设备数据同步
        run: |
          cd openwrt-builder
          timeout 7200 ./scripts/sync-devices.sh | tee sync-logs/sync-$(date +%Y%m%d_%H%M%S).log
          exit_code=$?
          if [ $exit_code -eq 124 ]; then
            echo "❌ 设备同步脚本超时"
            exit 1
          elif [ $exit_code -ne 0 ]; then
            echo "❌ 设备同步脚本失败（退出码：$exit_code）"
            exit $exit_code
          fi

      - name: 生成编译工作流文件
        run: |
          cd openwrt-builder
          timeout 3600 ./scripts/generate-workflow.sh | tee sync-logs/workflow-$(date +%Y%m%d_%H%M%S).log
          exit_code=$?
          if [ $exit_code -eq 124 ]; then
            echo "❌ 工作流生成脚本超时"
            exit 1
          elif [ $exit_code -ne 0 ]; then
            echo "❌ 工作流生成脚本失败（退出码：$exit_code）"
            exit $exit_code
          fi

      - name: 验证同步结果
        run: |
          cd openwrt-builder
          echo "===== 结果验证 ====="
          critical_files=(
            ".github/workflows/build.yml"
            "device-drivers.json"
            "sync-logs/source_branches.tmp"
          )
          for file in "${critical_files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "❌ 核心文件不存在：$file"
              exit 1
            fi
            if [ ! -s "$file" ]; then
              echo "❌ 核心文件为空：$file"
              exit 1
            fi
          done
          
          if ! grep -qE '[一-龥]' "device-drivers.json"; then
            echo "⚠️ 警告：设备JSON中未检测到中文字符"
          fi
          
          if ! jq . "device-drivers.json" > /dev/null; then
            echo "❌ 设备JSON格式错误"
            exit 1
          fi
          
          if ! yq eval '.' ".github/workflows/build.yml" > /dev/null; then
            echo "❌ 工作流YAML格式错误"
            exit 1
          fi
          
          echo "✅ 验证通过"

      - name: 提交同步结果
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          repository: ./openwrt-builder
          commit_message: "自动同步设备数据与工作流（${{ github.sha }}）"
          file_pattern: |
            .github/workflows/build.yml
            device-drivers.json
            sync-logs/*.log
            sync-logs/source_branches.tmp
            configs/*.json
          commit_user_name: "同步机器人"
          commit_user_email: "sync-bot@example.com"
          encoding: "utf-8"
          push_options: --force-with-lease

      - name: 上传同步日志
        uses: actions/upload-artifact@v4
        with:
          name: sync-logs-${{ github.run_id }}
          path: openwrt-builder/sync-logs/*.log
          retention-days: 7
          if-no-files-found: warn
